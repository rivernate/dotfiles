source ~/.env_vars
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
#if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
#fi

export LANG="en_US.UTF-8"
export SHELL="/bin/zsh"

export CLOUDSDK_PYTHON="/usr/bin/python"

# Setup Gnome Keyring for ssh
export SSH_AUTH_SOCK=$XDG_RUNTIME_DIR/gcr/ssh

# Setup history
HISTFILE=~/.zsh_history

###########################
# Setup asdf
###########################

if [ -f "${HOME}/.asdf/asdf.sh" ]; then
  . "${HOME}/.asdf/asdf.sh"
  # append completions to fpath
  fpath=(${ASDF_DIR}/completions $fpath)
fi
if [ -f "${HOME}/.asdf/plugins/java/set-java-home.zsh" ]; then
. ~/.asdf/plugins/java/set-java-home.zsh
fi

###########################
# End asdf setup
###########################

# enable auto complete
autoload -Uz compinit
compinit

# menu driven auto complete
zstyle ':completion:*' menu select

# completion cache
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache

# autocomplete aliases
setopt COMPLETE_ALIASES

#Prompt Theme System
autoload -Uz promptinit

# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -g -A key

key[Home]="$terminfo[khome]"
key[End]="$terminfo[kend]"
key[Insert]="$terminfo[kich1]"
key[Backspace]="$terminfo[kbs]"
key[Delete]="$terminfo[kdch1]"
key[Up]="$terminfo[kcuu1]"
key[Down]="$terminfo[kcud1]"
key[Left]="$terminfo[kcub1]"
key[Right]="$terminfo[kcuf1]"
key[PageUp]="$terminfo[kpp]"
key[PageDown]="$terminfo[knp]"

# setup key accordingly
[[ -n "$key[Home]"      ]] && bindkey -- "$key[Home]"      beginning-of-line
[[ -n "$key[End]"       ]] && bindkey -- "$key[End]"       end-of-line
[[ -n "$key[Insert]"    ]] && bindkey -- "$key[Insert]"    overwrite-mode
[[ -n "$key[Backspace]" ]] && bindkey -- "$key[Backspace]" backward-delete-char
[[ -n "$key[Delete]"    ]] && bindkey -- "$key[Delete]"    delete-char
[[ -n "$key[Up]"        ]] && bindkey -- "$key[Up]"        up-line-or-history
[[ -n "$key[Down]"      ]] && bindkey -- "$key[Down]"      down-line-or-history
[[ -n "$key[Left]"      ]] && bindkey -- "$key[Left]"      backward-char
[[ -n "$key[Right]"     ]] && bindkey -- "$key[Right]"     forward-char

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
    function zle-line-init () {
        echoti smkx
    }
    function zle-line-finish () {
        echoti rmkx
    }
    zle -N zle-line-init
    zle -N zle-line-finish
fi

[[ -n "$key[Up]"   ]] && bindkey -- "$key[Up]"   up-line-or-beginning-search
[[ -n "$key[Down]" ]] && bindkey -- "$key[Down]" down-line-or-beginning-search

##
# Start Antidote Block
##
#
{{ if eq .chezmoi.os "darwin" -}}
source $(brew --prefix)/opt/antidote/share/antidote/antidote.zsh
{{- end }}

if [ -f "${HOME}/.antidote/antidote.zsh" ]; then
  source "${HOME}/.antidote/antidote.zsh"
elif [ -f /usr/share/zsh/share/antidote.zsh ]; then
  source /usr/share/zsh/share/antidote.zsh
elif [ -f /usr/local/share/antidote/antidote.zsh ]; then
  source /usr/local/share/antidote/antidote.zsh
elif [ -f /usr/share/zsh-antidote/antidote.zsh ]; then
  source /usr/share/zsh-antidote/antidote.zsh
fi

# initialize plugins statically with ${ZDOTDIR:-~}/.zsh_plugins.txt
antidote load

##
# End Antidote Block
##

##
# Setup keybindings for History search
##
[[ -n "$key[Up]"   ]] && bindkey -- "$key[Up]"   history-substring-search-up
[[ -n "$key[Down]" ]] && bindkey -- "$key[Down]" history-substring-search-down

##
# Create home log dir
##
mkdir -p ~/.log

##
# GPG Agent
##
#if [[ -f ~/.local/bin/gpg-wsl.sh ]]; then
#         source ~/.local/bin/gpg-wsl.sh &>> ~/.log/gpg-wsl.log &
# elif [[ -f  ~/.local/bin/gpg-agent-relay.sh ]]; then
#	 ~/.local/bin/gpg-agent-relay.sh &>> ~/.logs/gpg-agent-relay.log &
# else
#         export SSH_AUTH_SOCK="/run/user/$UID/gnupg/S.gpg-agent.ssh"
#	 export GPG_TTY="$(tty)"
#	 if ! pgrep -x -u "$USER" gpg-agent > /dev/null
#	 then
#	 	 command gpgconf --launch gpg-agent > /dev/null
#	 fi
#	 gpg-connect-agent updatestartuptty /bye > /dev/null
#fi
##
# End GPG Agent
##

##
# Aliases
##

alias dc=docker-compose
alias dcr="docker-compose run --rm"
alias tf="terraform"
alias vim="nvim"
alias vi="nvim"
alias vimdiff="nvim -d"

##
# End of Aliases
##

autoload -U +X bashcompinit && bashcompinit

##
# AWS Summon gopass
##
aws_shell() {
 summon -p gopass -f $XDG_CONFIG_HOME/aws_shell/$1.yml aws_login.sh
}

show_virtual_env() {
  if [[ -n "$VIRTUAL_ENV" && -n "$DIRENV_DIR" ]]; then
    echo "($(basename $VIRTUAL_ENV))"
  fi
}
PS1='$(show_virtual_env)'$PS1

##
# Rapture shell integration
# https://github.com/daveadams/go-rapture
##
if type "rapture" > /dev/null; then
  eval "$( command rapture shell-init )"
fi

# This speeds up pasting w/ autosuggest
# https://github.com/zsh-users/zsh-autosuggestions/issues/238
pasteinit() {
  OLD_SELF_INSERT=${${(s.:.)widgets[self-insert]}[2,3]}
  zle -N self-insert url-quote-magic # I wonder if you'd need `.url-quote-magic`?
}

pastefinish() {
  zle -N self-insert $OLD_SELF_INSERT
}
zstyle :bracketed-paste-magic paste-init pasteinit
zstyle :bracketed-paste-magic paste-finish pastefinish

export PATH="${HOME}/.cargo/bin:${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

# SBT Config
export SBT_CREDENTIALS=${HOME}/.sbt/.credentials

# specify alias for SSH to set TERM env var
alias ssh='TERM=xterm-256color ssh'

fpath=(~/.zsh/completion ~/.zsh/funcs $fpath)

{{ if eq .chezmoi.os "darwin" -}}

###########################
# OSX specific setup
###########################

# Set JAVA_HOME
export JAVA_HOME=`/usr/libexec/java_home`

# The next line updates PATH for the Google Cloud SDK.
if [ -f "/opt/homebrew/share/google-cloud-sdk/path.zsh.inc" ]; then source "/opt/homebrew/share/google-cloud-sdk/path.zsh.inc"; fi

# The next line enables shell command completion for gcloud.
if [ -f "/opt/homebrew/share/google-cloud-sdk/path.zsh.inc" ]; then source "/opt/homebrew/share/google-cloud-sdk/path.zsh.inc"; fi

# Setup LibXML
export PATH="/opt/homebrew/opt/libxml2/bin:$PATH"
export LDFLAGS="-L/opt/homebrew/opt/libxml2/lib"
export CPPFLAGS="-I/opt/homebrew/opt/libxml2/include"
export PKG_CONFIG_PATH="/opt/homebrew/opt/libxml2/lib/pkgconfig"

# Setup Jetbrains Scripts
export PATH="/Users/nathan/Library/Application Support/JetBrains/Toolbox/scripts:$PATH"

# setup FZF
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Use curl provided by brew
export PATH="/opt/homebrew/opt/curl/bin:$PATH"

###########################
# End OSX specific setup
###########################

{{- end }}

###########################
# Setup OCaml
##########################

[[ ! -r /Users/nathan/.opam/opam-init/init.zsh ]] || source /Users/nathan/.opam/opam-init/init.zsh > /dev/null 2> /dev/null

###########################
# GO
###########################
export GOPATH=$(asdf where golang)/packages
export GOROOT=$(asdf where golang)/go
export PATH="${PATH}:$(go env GOPATH)/bin"


###########################
# Setup github copilot cli
###########################
if command -v github-copilot-cli &> /dev/null
then
  eval "$(github-copilot-cli alias -- "$0")"
fi
###########################
# End github copilot cli
###########################

{{ if eq (index .chezmoi.osRelease "id" ) "arch" -}}
# setup yay helpers
autoload -Uz yay-needed yay-sync
{{- end }}

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
#[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

export STARSHIP_CONFIG="${XDG_CONFIG_HOME}/starship/config.toml"
eval "$(starship init zsh)"

{{ if .work -}}
function dwta() {
    if [ $# -lt 1 ] || [ $# -gt 2 ]; then
        echo "Usage: dwta <branch_suffix|prefix/branch> [base_branch]"
        return 1
    fi

    BASE_DIR="/home/nathan/Development/Derivita.git"
    BRANCH=$1
    BASE_BRANCH="${2:-origin/master}"

    # Ensure the base directory exists
    if [ ! -d "$BASE_DIR" ]; then
        echo "Error: Base directory '$BASE_DIR' does not exist."
        return 1
    fi

    # If the branch does not include a prefix, prepend 'nathan/'
    if [[ "$BRANCH" != */* ]]; then
        BRANCH="nathan/$BRANCH"
    fi

    # Construct the worktree path with the prefix as a directory
    WORKTREE_PATH="${BASE_DIR}/$(echo "$BRANCH" | tr '/' '/')"

    # Ensure the worktree path is unique and does not already exist
    if [ -d "$WORKTREE_PATH" ]; then
        echo "Error: Worktree path '$WORKTREE_PATH' already exists."
        return 1
    fi

    # Fetch the latest state from origin
    git -C "${BASE_DIR}/master" fetch origin

    # Check if the branch exists on origin
    if git -C "${BASE_DIR}/master" show-ref --verify --quiet "refs/remotes/origin/$BRANCH"; then
        echo "Branch '$BRANCH' exists on origin. Adding worktree."

        # Check if the local branch already exists
        if git -C "${BASE_DIR}/master" show-ref --verify --quiet "refs/heads/$BRANCH"; then
            echo "Local branch '$BRANCH' already exists. Using existing branch."
        else
            # Create a local branch that tracks the remote branch
            git -C "${BASE_DIR}/master" branch --track "$BRANCH" "origin/$BRANCH"
        fi
        git -C "${BASE_DIR}/master" worktree add "$WORKTREE_PATH" "$BRANCH"
    else
        # If the branch doesn't exist and is prefixed with 'nathan/', create it
        if [[ "$BRANCH" == nathan/* ]]; then
            echo "Branch '$BRANCH' does not exist on origin. Creating from '$BASE_BRANCH' and adding worktree."
            git -C "${BASE_DIR}/master" worktree add "$WORKTREE_PATH" -b "$BRANCH" "$BASE_BRANCH"
        else
            echo "Error: Branch '$BRANCH' does not exist on origin."
            return 1
        fi
    fi

    # Define the session and worktree path
    SESSION_NAME="Derivita $BRANCH"
    WORKTREE_NAME=$(basename "$WORKTREE_PATH")

    # Check if we are in a tmux session
    if [ -n "$TMUX" ]; then
        tmux new-session -d -s "$SESSION_NAME" -c "$WORKTREE_PATH"
        tmux switch-client -t "$SESSION_NAME"
    else
        # Create a new tmux session named after the workspace in the worktree directory
        tmux new-session -d -s "$SESSION_NAME" -c "$WORKTREE_PATH"
        tmux attach-session -t "$SESSION_NAME"
    fi
}
{{ end -}}
