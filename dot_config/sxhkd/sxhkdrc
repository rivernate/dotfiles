#
# wm independent hotkeys
#

# terminal emulator
super + Return
	wezterm -e tmux

# program launcher
super + @space
	rofi -show drun

# make sxhkd reload its configuration files:
super + Escape
	pkill -USR1 -x sxhkd; notify-send "sxhkd" "Configuration reloaded" -t 1000

# Screen lock with enhanced security
super + Home
	i3lock -i ~/.config/i3lock/tile.png -t -e -f

#
# bspwm hotkeys
#

# quit bspwm normally
super + alt + Escape
	bspc quit

# close and kill
super + {_,shift + }w
	bspc node -{c,k}

# alternate between the tiled and monocle layout
super + m
	bspc desktop -l next

# send the newest marked node to the newest preselected node
super + y
	bspc node newest.marked.local -n newest.!automatic.local

# swap the current node and the biggest node
super + g
	bspc node -s biggest

#
# state/flags
#

# set the window state
super + {t,shift + t,s,f}
	bspc node -t {tiled,pseudo_tiled,floating,fullscreen}

# set the node flags
super + ctrl + {m,x,y,z}
	bspc node -g {marked,locked,sticky,private}

#
# focus/swap
#

# focus the node in the given direction
super + {_,shift + }{h,j,k,l}
	bspc node -{f,s} {west,south,north,east}

# focus the node for the given path jump
super + {p,b,comma,period}
	bspc node -f @{parent,brother,first,second}

# focus the next/previous node in the current desktop
super + {_,shift + }c
	bspc node -f {next,prev}.local

# focus the next/previous desktop in the current monitor
super + bracket{left,right}
	bspc desktop -f {prev,next}.local

# focus the last node/desktop
super + {grave,Tab}
	bspc {node,desktop} -f last

# focus the older or newer node in the focus history
super + {o,i}
	bspc wm -h off; bspc node {older,newer} -f; bspc wm -h on

# focus or send to the given desktop
super + {_,shift + }{1-4}
	bspc {desktop -f,node -d} {terminal,chrome,chat,camera}

# focus or send to temporary desktops (5-0 maps to 1st-6th temp desktop)
super + {_,shift + }{5,6,7,8,9,0}
        ~/.local/bin/switch_temp_desktop.sh {focus,move} {5,6,7,8,9,0}

# move desktop on current monitor or between monitors
super + ctrl + {_,shift + }{comma,period}
	bspc desktop focused {-b,-m} {prev,next}

#
# preselect
#

# preselect the direction
super + ctrl + {h,j,k,l}
	bspc node -p {west,south,north,east}

# preselect the ratio
super + ctrl + {1-9}
	bspc node -o 0.{1-9}

# cancel the preselection for the focused node
super + ctrl + space
	bspc node -p cancel

# cancel the preselection for the focused desktop
super + ctrl + shift + space

# move window around the tree
super + ctrl + shift {Left,Down,Up,Right}
        bspc node -n {west,south,north,east}
	bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

#
# move/resize
#

# expand a window by moving one of its side outward
super + alt + {h,j,k,l}
	bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}

# contract a window by moving one of its side inward
super + alt + shift + {h,j,k,l}
	bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}

# move a floating window
super + {Left,Down,Up,Right}
	bspc node -v {-20 0,0 20,0 -20,20 0}

# Rotate the focused window 90 degrees clockwise
super + ctrl + r
	bspc node @/ -R 90

# Rotate the focused window 90 degrees counterclockwise
super + ctrl + shift + r
	bspc node @/ -R 270

#
# desktop management
#

# create a new desktop on the current monitor
super + plus
        N="temp_$(($(bspc query -D --names | grep '^temp_' | sed 's/temp_//' | sort -n | tail -n1 2>/dev/null || echo 0) + 1))"; bspc monitor -a "$N"; bspc desktop -f "$N"; notify-send "Desktop" "Created: $N" -t 1000

# remove current desktop (only if empty)
super + {minus,equal}
        D=$(bspc query -D -d focused --names); if [ "$(bspc query -N -d focused -n .window)" = "" ]; then if [ "$(bspc query -D -m focused --names | wc -l)" -gt 1 ]; then FIRST=$(bspc query -D -m focused --names | head -n 1); [ "$D" != "$FIRST" ] && bspc desktop -f "$FIRST"; bspc desktop "$D" -r; notify-send "Desktop" "Removed: $D" -t 1000; else notify-send "Error" "Cannot remove last desktop" -t 2000; fi; else notify-send "Error" "Desktop not empty" -t 2000; fi

#
# media controls
#

# Brightness control with dunst notification
XF86MonBrightnessUp
      brightnessctl set +10%; notify-send "Brightness" "$(brightnessctl get)%" -t 1000

XF86MonBrightnessDown
      brightnessctl set 10%-; notify-send "Brightness" "$(brightnessctl get)%" -t 1000

# Volume control with dunst notification
XF86AudioMute
      amixer set Master toggle; notify-send "Volume" "Toggled" -t 1000

XF86AudioRaiseVolume
      amixer set Master 5%+; notify-send "Volume" "$(amixer get Master | grep -Po '[0-9]+(?=%)' | head -1)%" -t 1000

XF86AudioLowerVolume
      amixer set Master 5%-; notify-send "Volume" "$(amixer get Master | grep -Po '[0-9]+(?=%)' | head -1)%" -t 1000
